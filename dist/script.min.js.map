{"version":3,"sources":["script.js"],"names":["world","document","querySelector","canvas","getElementById","score","days","endScreen","c","getContext","width","clientWidth","height","clientHeight","pressed","keys","ArrowLeft","count","pessed","counter","finish","fired","intervalId","innerHTML","clearInterval","setInterval","bip","ArrowRight","missiles","alienMissiles","grids","player","particules","lifes","_this","this","_classCallCheck","Player","velocity","x","y","image","Image","src","onload","position","drawImage","push","Missile","draw","Alien","_this2","_ref2","console","log","alienMissile","_ref3","save","fillStyle","fillRect","fill","restore","Grid","invaders","floor","colums","Math","rows","Particule","_ref4","radius","color","opacity","globalAlpha","beginPath","PI","closePath","_ref5","init","animationLoop","clearRect","update","requestAnimationFrame","index","missile","setTimeout","splice","grid","indexGrid","frames","length","random","shoot","forEach","indexI","indexM","invader","i","lostLife","particule","event","key"],"mappings":"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","file":"script.min.js","sourcesContent":["const world = document.querySelector('#gameBoard');\nconst canvas = document.getElementById('canvas');\nconst score = document.getElementById('score');\nconst days = document.getElementById('days');\nconst endScreen = document.getElementById('endScreen');\nconst c = world.getContext('2d');\nworld.width = world.clientWidth;\nworld.height = world.clientHeight;\n\nlet frames = 0;\nconst keys = {\n    ArrowLeft: { pessed: false },\n    ArrowRight: { pressed: false },\n    fired: { pressed: false }\n}\n\n// initialize score to 0\nlet count = 0;\nscore.innerHTML = count;\nvar intervalId = null;\nvar counter = 60;\ndays.innerHTML = counter;\n\nfunction finish() {\n    clearInterval(intervalId);\n    document.getElementById(\"days\").innerHTML = \"TERMINE!\";\n    clearInterval(intervalId);\n}\nsetInterval(() => {\n    counter--;\n    if (counter == 0) finish();\n    else {\n        document.getElementById(\"days\").innerHTML = counter + \" secondes restantes\";\n    }\n    counter = counter <= 0 ? 0 : counter - 0;\n\n}, 1000)\n\nfunction start() {\n    intervalId = setInterval(bip, 1000);\n}\nclass Player {\n    constructor() {\n        this.velocity = {\n            x: 0, // Vitesse de déplacement sur l'axe des X\n            y: 0 // Vitesse de déplacement sur l'axe des Y\n        }\n        const image = new Image();\n        image.src = './space.png';\n        image.onload = () => {\n            this.image = image;\n            this.width = 48; // Largeur du vaisseau\n            this.height = 48; // Hauteur du vaisseau\n            this.position = {\n                x: world.width / 2 - this.width / 2, // Position sur l'axe des x\n                y: world.height - this.height - 10 // Position sur l'axe des Y\n            }\n\n        }\n    }\n\n    draw() {\n        c.drawImage(this.image,\n            this.position.x,\n            this.position.y,\n            this.width,\n            this.height\n        );\n    }\n\n    shoot() {\n        missiles.push(new Missile({\n            position: {\n                x: this.position.x + this.width / 2,\n                y: this.position.y\n            },\n\n        }));\n    }\n\n    update() {\n        if (this.image) {\n            if (keys.ArrowLeft.pressed && this.position.x >= 0) {\n                this.velocity.x = -5;\n            } else if (keys.ArrowRight.pressed && this.position.x <= world.width - this.width) {\n                this.velocity.x = 5;\n            } else { this.velocity.x = 0; }\n            this.position.x += this.velocity.x;\n            this.draw();\n        }\n    }\n}\nclass Alien {\n    constructor({ position }) {\n        this.velocity = { x: 0, y: 0 }\n        const image = new Image();\n        image.src = './ghost.png';\n        image.onload = () => {\n            this.image = image;\n            this.width = 32;\n            this.height = 32;\n            this.position = {\n                x: position.x,\n                y: position.y\n            }\n        }\n\n    }\n    draw() {\n        if (this.image) {\n            c.drawImage(this.image, this.position.x, this.position.y, this.width, this.height, );\n        }\n    }\n\n    update({ velocity }) {\n        if (this.image) {\n            this.position.x += velocity.x;\n            this.position.y += velocity.y;\n            if (this.position.y + this.height >= world.height) {\n                console.log('You loose');\n            }\n        }\n        this.draw();\n    }\n    shoot(alienMissiles) {\n        if (this.position) {\n            alienMissiles.push(new alienMissile({\n                position: {\n                    x: this.position.x,\n                    y: this.position.y\n                },\n                velocity: {\n                    x: 0,\n                    y: 3\n                }\n            }))\n        }\n    }\n}\n\nclass Missile {\n    constructor({ position }) {\n        this.position = position;\n        this.velocity = { x: 0, y: -5 };\n        this.width = 3;\n        this.height = 10;\n    }\n    draw() {\n        c.save();\n        c.fillStyle = 'red';\n        c.fillRect(this.position.x, this.position.y, this.width, this.height)\n        c.fill()\n        c.restore()\n\n\n    }\n    update() {\n        this.position.y += this.velocity.y;\n        this.draw();\n    }\n}\nclass Grid {\n    constructor() {\n        this.position = { x: 0, y: 0 }\n        this.velocity = { x: 1, y: 0 }\n        this.invaders = []\n        let rows = Math.floor((world.height / 34) * (1 / 5));\n        const colums = Math.floor((world.width / 34) * (2 / 5));\n        this.height = rows * 34;\n        this.width = colums * 34;\n        for (let x = 0; x < colums; x++) {\n            for (let y = 0; y < rows; y++) {\n                this.invaders.push(new Alien({\n                    position: {\n                        x: x * 34,\n                        y: y * 34\n                    }\n                }))\n            }\n        }\n    }\n    update() {\n        this.position.x += this.velocity.x;\n        this.position.y += this.velocity.y;\n        this.velocity.y = 0;\n        if (this.position.x + this.width >= world.width || this.position.x == 0) {\n            this.velocity.x = -this.velocity.x;\n            this.velocity.y = 34;\n        }\n\n\n    }\n}\nclass Particule {\n    constructor({ position, velocity, radius, color }) {\n        this.position = position\n        this.velocity = velocity\n        this.radius = radius\n        this.color = color\n        this.opacity = 1\n    }\n    draw() {\n        c.save();\n        c.globalAlpha = this.opacity;\n        c.beginPath();\n        c.fillStyle = this.color;\n        c.arc(this.position.x, this.position.y, this.radius, 0, Math.PI * 2)\n        c.fill()\n        c.closePath()\n        c.restore();\n    }\n    update() {\n        this.position.x += this.velocity.x;\n        this.position.y += this.velocity.y;\n        if (this.opacity > 0) {\n            this.opacity -= 0.01;\n        }\n        this.draw()\n    }\n}\n\nclass alienMissile {\n    constructor({ position, velocity }) {\n        this.position = position;\n        this.velocity = velocity;\n        this.width = 3;\n        this.height = 10;\n    }\n    draw() {\n        // c.beginPath();\n        c.save();\n        c.fillStyle = 'yellow';\n        c.fillRect(this.position.x, this.position.y, this.width, this.height)\n        c.fill()\n        c.restore()\n    }\n    update() {\n        this.draw()\n        this.position.x += this.velocity.x;\n        this.position.y += this.velocity.y;\n    }\n}\n\nlet missiles;\nlet alienMissiles;\nlet grids;\nlet player;\nlet particules;\nlet lifes;\n\nconst init = () => {\n    missiles = [];\n    alienMissiles = [];\n    grids = [new Grid()];\n    player = new Player();\n    particules = [];\n    lifes = 3;\n    keys.ArrowLeft.pressed = false;\n    keys.ArrowRight.pressed = false;\n    keys.fired.pressed = false;\n\n}\n\ninit();\n\n\nconst animationLoop = () => {\n    c.clearRect(0, 0, world.width, world.height);\n    player.update();\n    requestAnimationFrame(animationLoop);\n\n    missiles.forEach((missile, index) => {\n        if (missile.position.y + missile.height <= 0) {\n            setTimeout(() => {\n                missiles.splice(index, 1)\n\n            }, 0)\n        } else { missile.update(); }\n    })\n    grids.forEach((grid, indexGrid) => {\n        grid.update();\n        if (frames % 50 === 0 && grid.invaders.length > 0) {\n            grid.invaders[Math.floor(Math.random() * (grid.invaders.length))].shoot(alienMissiles)\n        }\n        grid.invaders.forEach((invader, indexI) => {\n            invader.update({ velocity: grid.velocity });\n            missiles.forEach((missile, indexM) => {\n                if (missile.position.y <= invader.position.y + invader.height &&\n                    missile.position.y >= invader.position.y &&\n                    missile.position.x + missile.width >= invader.position.x &&\n                    missile.position.x - missile.width <= invader.position.x + invader.width) {\n                    for (let i = 0; i < 12; i++) {\n                        particules.push(new Particule({\n                            position: {\n                                x: invader.position.x + invader.width / 2,\n                                y: invader.position.y + invader.height / 2\n                            },\n                            velocity: { x: (Math.random() - 0.5) * 2, y: (Math.random() - 0.5) * 2 },\n                            radius: Math.random() * 5 + 1,\n                            color: 'red'\n                        }))\n                    }\n                    setTimeout(() => {\n                        grid.invaders.splice(indexI, 1);\n                        missiles.splice(indexM, 1)\n                        count++;\n                        score.innerHTML = count;\n                        // counter--;\n                        // days.innerHTML = counter;\n                        if (grid.invaders.length === 0 && grids.length == 1) {\n                            grids.splice(indexGrid, 1);\n                            grids.push(new Grid());\n\n                        }\n                    }, 0)\n                }\n            })\n        })\n\n    })\n    alienMissiles.forEach((alienMissile, index) => {\n        if (alienMissile.position.y + alienMissile.height >= world.height) {\n            setTimeout(() => {\n                alienMissiles.splice(index, 1)\n            }, 0);\n\n        } else { alienMissile.update(); }\n        if (alienMissile.position.y + alienMissile.height >= player.position.y &&\n            alienMissile.position.y <= player.position.y + player.height &&\n            alienMissile.position.x >= player.position.x &&\n            alienMissile.position.x + alienMissile.width <= player.position.x + player.width) {\n            alienMissiles.splice(index, 1);\n\n            for (let i = 0; i < 22; i++) {\n                particules.push(new Particule({\n                    position: {\n                        x: player.position.x + player.width / 2,\n                        y: player.position.y + player.height / 2\n                    },\n                    velocity: { x: (Math.random() - 0.5) * 2, y: (Math.random() - 0.5) * 2 },\n                    radius: Math.random() * 5,\n                    color: 'white'\n                }))\n            }\n            lostLife();\n\n        }\n    })\n\n    particules.forEach((particule, index) => {\n        if (particule.opacity <= 0) {\n            particules.splice(index, 1)\n        } else {\n            particule.update();\n        }\n    })\n\n\n\n    frames++;\n}\nanimationLoop();\n\nconst lostLife = () => {\n    lifes--;\n    if (lifes <= 0) {\n        alert('perdu');\n        init();\n    }\n}\n\naddEventListener('keydown', (event) => {\n    switch (event.key) {\n        case 'ArrowLeft':\n            keys.ArrowLeft.pressed = true;\n            break;\n        case 'ArrowRight':\n            keys.ArrowRight.pressed = true;\n            break;\n    }\n    // if (daysRemaining > 0) {\n    //     daysRemaining--;\n    //     days.innerHTML = daysRemaining;\n    // }\n})\n\naddEventListener('keyup', (event) => {\n        switch (event.key) {\n            case 'ArrowLeft':\n                keys.ArrowLeft.pressed = false;\n                break;\n            case 'ArrowRight':\n                keys.ArrowRight.pressed = false;\n                break;\n            case ' ':\n                player.shoot();\n                break;\n        }\n        // let targetElement = e.target || e.srcElement;\n\n        // if (targetElement.classList.contains('virus')) {\n        //     targetElement.remove();\n        //     count++;\n        //     score.innerHTML = count;\n        // }\n\n    })\n    // daysLeft = 60;\n    // gameOverNumber = 50;\n    // loopPlay = false;\n\n// function start() {\n//     count = 0;\n//     getFaster = 6000;\n//     daysRemaining = daysLeft;\n\n//     canvas.innerHTML = '';\n//     score.innerHTML = count;\n//     days.innerHTML = daysRemaining;\n\n//     // make sure to not play loop several times\n//     loopPlay ? '' : game();\n//     loopPlay = true;\n\n//     function game() {\n//         let randomTime = Math.round(Math.random() * getFaster);\n//         getFaster > 700 ? getFaster = (getFaster * 0.90) : '';\n\n//         setTimeout(() => {\n//             if (daysRemaining === 0) {\n//                 youWin();\n//             } else if (canvas.childElementCount < gameOverNumber) {\n//                 animationLoop();\n//                 game();\n//             } else {\n//                 gameOver();\n//             }\n//         }, randomTime);\n//     };\n\n//     const gameOver = () => {\n//         endScreen.innerHTML = ` < div class = \"gameOver\" > Game over < br / > score: $ { count } < /div>`;\n//         endScreen.style.visibility = 'visible';\n//         endScreen.style.opacity = '1';\n//         loopPlay = false;\n//     };\n\n//     const youWin = () => {\n//         let accuracy = Math.round(count / daysLeft * 100);\n//         endScreen.innerHTML = `<div class=\"youWin\">Well done ! You overcome this mother fucker ! <br/><span>Accuarcy: ${accuracy} %</span></div>`;\n//         endScreen.style.visibility = 'visible';\n//         endScreen.style.opacity = '1';\n//         loopPlay = false;\n//     };\n// }\n// // remove element clicked\n// document.addEventListener(\"click\", function(e) {\n//     let targetElement = e.target || e.srcElement;\n\n//     if (targetElement.classList.contains(alien)) {\n//         targetElement.remove();\n//         count++;\n//         score.innerHTML = count;\n//     };\n// });\n\n// // hide and screen on click\n// endScreen.addEventListener('click', () => {\n//     start();\n//     setTimeout(() => {\n//         endScreen.style.visibility = 'hidden';\n//     }, 1000);\n// });"]}